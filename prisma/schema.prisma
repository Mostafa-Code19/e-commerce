generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String   @id @default(cuid())
  name            String?
  email           String   @unique
  email_verified  DateTime?
  phone_number    String?
  mobile_number   String?  @unique
  mobile_verified Boolean  @default(false)
  melli_code      String?  @unique
  image           String?
  address         String?
  blocked         Boolean  @default(false)
  blocked_for     String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  last_login      DateTime @default(now())
  orders          Order[]
  accounts        Account[]
  sessions        Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id            Int @id @default(autoincrement())
  status        Status @default(PENDING)
  created_at    DateTime @default(now())
  client        User @relation(fields: [client_id], references: [id])
  client_id     String
  price         Int
  discout       Int
  payment       Payment
  shipping_cost Int
  Tracking_code String?
  items         Product[]
}

enum Status {
  CANCELED
  POSTED
  PREPARING
  PENDING
}

enum Payment {
  DEPOSIT
  CASH
}

model Product {
  id          String   @id @default(cuid())
  title       String
  thumbnail   String
  gallery     Image[]
  description String?
  colors      Color[]
  sizes       Size[]
  price       Int
  discount    Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  orders      Order[]
}

model Image {
  id         String   @id @default(cuid())
  src        String   @default("/product/")
  alt        String
  product    Product  @relation(fields: [product_id], references: [id])
  product_id String
  created_at DateTime @default(now())
}

model Color {
  id         String    @id @default(cuid())
  color      String
  product    Product[]
  created_at DateTime  @default(now())
}

model Size {
  id         String    @id @default(cuid())
  size       Int
  product    Product[]
  created_at DateTime  @default(now())
}

model Coupon {
  id String @id @default(cuid())
  code String @unique
  type CouponType @default(PERCENTAGE)
  value Int
  quantity Int @default(1)
  created_at DateTime @default(now())
  expires_at DateTime?
}

enum CouponType {
  PERCENTAGE
  PRICE
}
