generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  phone_number   String?
  mobile_number  String?   @unique
  mobileVerified Boolean   @default(false)
  melli_code     String?   @unique
  image          String?
  address        String?
  blocked        Boolean   @default(false)
  blocked_for    String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  last_login     DateTime  @default(now())
  orders         Order[]
  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id            String            @id @default(cuid())
  status        Status            @default(PENDING)
  created_at    DateTime          @default(now())
  client        User              @relation(fields: [client_id], references: [id])
  client_id     String
  price         Int
  discount      Int
  payment       Payment
  shipping_cost Int
  tracking_code String?
  items         ProductLocation[]
}

enum Status {
  CANCELED
  POSTED
  PREPARING
  PENDING
}

enum Payment {
  DEPOSIT
  CASH
}

model ProductLocation {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  color     Color   @relation(fields: [colorId], references: [id])
  colorId   String  @unique
  size      Size    @relation(fields: [sizeId], references: [id])
  sizeId    String  @unique
  quantity  Int     @default(1)
  price     Int
  discount  Int     @default(0)
  orders    Order[]
}

model Product {
  id              String            @id @default(cuid())
  title           String
  description     String?
  productLocation ProductLocation[]
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
}

model Image {
  id         String   @id @default(cuid())
  src        String   @default("/product/")
  alt        String
  color      Color    @relation(fields: [colorId], references: [id])
  colorId    String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Color {
  id              String           @id @default(cuid())
  color           String
  gallery         Image[]
  productLocation ProductLocation?
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
}

model Size {
  id              String           @id @default(cuid())
  size            Int
  productLocation ProductLocation?
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
}

model Coupon {
  id         String     @id @default(cuid())
  code       String     @unique
  type       CouponType @default(PERCENTAGE)
  value      Int
  quantity   Int        @default(1)
  created_at DateTime   @default(now())
  expires_at DateTime?
}

enum CouponType {
  PERCENTAGE
  PRICE
}
